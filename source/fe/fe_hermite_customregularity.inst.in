// ---------------------------------------------------------------------
//
// Copyright (C) 2021 - 2022 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------



for (deal_II_dimension : DIMENSIONS)
  {
    template void internal::hermite_hierarchic_to_lexicographic_numbering<deal_II_dimension>(
        const unsigned int         regularity,
        const unsigned int         nodes,
        std::vector<unsigned int> &h2l);
        
    template std::vector<unsigned int> internal::hermite_lexicographic_to_hierarchic_numbering<deal_II_dimension>(
        const unsigned int regularity,
        const unsigned int nodes);  
        
    template std::vector<unsigned int> internal::hermite_face_lexicographic_to_hierarchic_numbering<deal_II_dimension>(
        const unsigned int regularity,
        const unsigned int nodes);       
  }



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS; tensor_rank : RANKS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    template class internal::RescalerCustomreg<deal_II_dimension, deal_II_space_dimension, Tensor<tensor_rank, deal_II_space_dimension>>;
#endif
  }



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    template class internal::RescalerCustomreg<deal_II_dimension, deal_II_space_dimension>;
    template class FE_CustomHermite<deal_II_dimension, deal_II_space_dimension>;
#endif
  }
  
  

for (deal_II_dimension : DIMENSIONS)
  {
    template void VectorTools::internal::do_hermite_direct_projection<deal_II_dimension, deal_II_dimension, double>(
        const MappingHermite<deal_II_dimension> &                                       mapping_h,
        const DoFHandler<deal_II_dimension> &                                           dof_handler,
        const std::map<types::boundary_id, const Function<deal_II_dimension, double>*> &boundary_functions,
        const Quadrature<deal_II_dimension-1> &                                         quadrature,
        const unsigned int                                                              position,
        std::map<types::global_dof_index, double> &                                     boundary_values,
        std::vector<unsigned int>                                                       component_mapping);
    
    template void VectorTools::project_boundary_values<deal_II_dimension, deal_II_dimension, double>(
        const MappingHermite<deal_II_dimension> &                                       mapping_h,
        const DoFHandler<deal_II_dimension> &                                           dof_handler,
        const std::map<types::boundary_id, const Function<deal_II_dimension, double>*> &boundary_functions,
        const Quadrature<deal_II_dimension-1> &                                         quadrature,
        const HermiteBoundaryType                                                       projection_mode,
        std::map<types::global_dof_index, double> &                                     boundary_values,
        std::vector<unsigned int>                                                       component_mapping);
        
    template void VectorTools::project<deal_II_dimension, Vector<double>, deal_II_dimension>(
        const MappingHermite<deal_II_dimension> &                      mapping,
        const DoFHandler<deal_II_dimension> &                          dof,
        const AffineConstraints<Vector<double>::value_type> &          constraints,
        const Quadrature<deal_II_dimension> &                          quadrature,
        const Function<deal_II_dimension, Vector<double>::value_type> &function,
        Vector<double> &                                               vec,
        const bool                                                     enforce_zero_boundary,
        const Quadrature<deal_II_dimension-1> &                        q_boundary,
        const bool                                                     project_to_boundary_first);
  }
  
