
template void internal::hermite_hierarchic_to_lexicographic_numbering<1>(
        const unsigned int         regularity,
        const unsigned int         nodes,
        std::vector<unsigned int> &h2l);
template void internal::hermite_hierarchic_to_lexicographic_numbering<2>(
        const unsigned int         regularity,
        const unsigned int         nodes,
        std::vector<unsigned int> &h2l);
template void internal::hermite_hierarchic_to_lexicographic_numbering<3>(
        const unsigned int         regularity,
        const unsigned int         nodes,
        std::vector<unsigned int> &h2l);
  
  
template std::vector<unsigned int> internal::hermite_lexicographic_to_hierarchic_numbering<1>(
        const unsigned int regularity,
        const unsigned int nodes);        
template std::vector<unsigned int> internal::hermite_lexicographic_to_hierarchic_numbering<2>(
        const unsigned int regularity,
        const unsigned int nodes);        
template std::vector<unsigned int> internal::hermite_lexicographic_to_hierarchic_numbering<3>(
        const unsigned int regularity,
        const unsigned int nodes);        
        
template std::vector<unsigned int> internal::hermite_face_lexicographic_to_hierarchic_numbering<1>(
        const unsigned int regularity,
        const unsigned int nodes);        
template std::vector<unsigned int> internal::hermite_face_lexicographic_to_hierarchic_numbering<2>(
        const unsigned int regularity,
        const unsigned int nodes);        
template std::vector<unsigned int> internal::hermite_face_lexicographic_to_hierarchic_numbering<3>(
        const unsigned int regularity,
        const unsigned int nodes);
        

template class internal::Rescaler<1>;
template class internal::Rescaler<2>;
template class internal::Rescaler<3>;
template class internal::Rescaler<1,2>;
template class internal::Rescaler<1,3>;
template class internal::Rescaler<2,3>;


template class internal::Rescaler<1,1, Tensor<1,1>>;
template class internal::Rescaler<1,2, Tensor<1,2>>;
template class internal::Rescaler<1,3, Tensor<1,3>>;
template class internal::Rescaler<2,2, Tensor<1,2>>;
template class internal::Rescaler<2,3, Tensor<1,3>>;
template class internal::Rescaler<3,3, Tensor<1,3>>;


template class internal::Rescaler<1,1, Tensor<2,1>>;
template class internal::Rescaler<1,2, Tensor<2,2>>;
template class internal::Rescaler<1,3, Tensor<2,3>>;
template class internal::Rescaler<2,2, Tensor<2,2>>;
template class internal::Rescaler<2,3, Tensor<2,3>>;
template class internal::Rescaler<3,3, Tensor<2,3>>;


template class internal::Rescaler<1,1, Tensor<3,1>>;
template class internal::Rescaler<1,2, Tensor<3,2>>;
template class internal::Rescaler<1,3, Tensor<3,3>>;
template class internal::Rescaler<2,2, Tensor<3,2>>;
template class internal::Rescaler<2,3, Tensor<3,3>>;
template class internal::Rescaler<3,3, Tensor<3,3>>;


template class FE_Hermite<1,1>;
template class FE_Hermite<1,2>;
template class FE_Hermite<1,3>;
template class FE_Hermite<2,2>;
template class FE_Hermite<2,3>;
template class FE_Hermite<3,3>;


template void VectorTools::internal::do_hermite_direct_projection<1,1,double>(
    const MappingHermite<1,1> &                                     mapping_h,
    const DoFHandler<1,1> &                                         dof_handler,
    const std::map<types::boundary_id, const Function<1, double>*> &boundary_functions,
    const Quadrature<0> &                                           quadrature,
    const unsigned int                                              position,
    std::map<types::global_dof_index, double> &                     boundary_values,
    std::vector<unsigned int>                                       component_mapping = {});
    
template void VectorTools::internal::do_hermite_direct_projection<2,2,double>(
    const MappingHermite<2,2> &                                     mapping_h,
    const DoFHandler<2,2> &                                         dof_handler,
    const std::map<types::boundary_id, const Function<2, double>*> &boundary_functions,
    const Quadrature<1> &                                           quadrature,
    const unsigned int                                              position,
    std::map<types::global_dof_index, double> &                     boundary_values,
    std::vector<unsigned int>                                       component_mapping = {});    
    
template void VectorTools::internal::do_hermite_direct_projection<3,3,double>(
    const MappingHermite<3,3> &                                     mapping_h,
    const DoFHandler<3,3> &                                         dof_handler,
    const std::map<types::boundary_id, const Function<3, double>*> &boundary_functions,
    const Quadrature<2> &                                           quadrature,
    const unsigned int                                              position,
    std::map<types::global_dof_index, double> &                     boundary_values,
    std::vector<unsigned int>                                       component_mapping = {});
    
template void VectorTools::project_boundary_values<1,1,double>(
    const MappingHermite<1,1> &                                     mapping_h,
    const DoFHandler<1,1> &                                         dof_handler,
    const std::map<types::boundary_id, const Function<1, double>*> &boundary_functions,
    const Quadrature<0> &                                           quadrature,
    const HermiteBoundaryType                                       projection_mode,
    std::map<types::global_dof_index, double> &                     boundary_values,
    std::vector<unsigned int>                                       component_mapping);
    
template void VectorTools::project_boundary_values<2,2,double>(
    const MappingHermite<2,2> &                                     mapping_h,
    const DoFHandler<2,2> &                                         dof_handler,
    const std::map<types::boundary_id, const Function<2, double>*> &boundary_functions,
    const Quadrature<1> &                                           quadrature,
    const HermiteBoundaryType                                       projection_mode,
    std::map<types::global_dof_index, double> &                     boundary_values,
    std::vector<unsigned int>                                       component_mapping);
    
template void VectorTools::project_boundary_values<3,3,double>(
    const MappingHermite<3,3> &                                     mapping_h,
    const DoFHandler<3,3> &                                         dof_handler,
    const std::map<types::boundary_id, const Function<3, double>*> &boundary_functions,
    const Quadrature<2> &                                           quadrature,
    const HermiteBoundaryType                                       projection_mode,
    std::map<types::global_dof_index, double> &                     boundary_values,
    std::vector<unsigned int>                                       component_mapping);
